- The virtual DOM is now used minimally in React; it’s no longer the core update mechanism.
- `createRoot` initializes a React root for rendering components into a DOM node.
- React uses a virtual DOM to efficiently update only the parts of the real DOM that have changed, rather than repainting the entire DOM.
- The virtual DOM represents the UI as a tree structure, which React compares to the real DOM to determine minimal updates.
- Hooks were introduced after the React team realized not all UI updates need to be immediate.

**Key Document:** [React Fiber Architecture](https://github.com/acdlite/react-fiber-architecture)

**React Fiber Highlights:**
1. Can pause, abort, or reuse work as new updates arrive.
2. Assigns priorities to different updates.
3. Introduces new concurrency features.

**Hydration:**
- Hydration makes server-rendered HTML interactive when JavaScript loads.

**Recommended Resources:**
- Differences between React Components, Elements, and Instances.
- React’s reconciliation algorithm.
- Conceptual model of React.
- React Design Principles, especially scheduling and Fiber.

**Diffing and Keys:**
- Keys in lists must be stable, predictable, and unique for efficient diffing.

**Scheduling and Updates:**
1. Not all UI updates are urgent; unnecessary updates can reduce performance.
2. Updates have different priorities (e.g., animations vs. data).
3. Push-based scheduling: the app triggers updates.
4. Pull-based scheduling: React manages update timing for efficiency.

**React Fiber Scheduling Goals:**
1. Pause and resume work.
2. Prioritize different tasks.
3. Reuse completed work.
4. Abort unnecessary work.

**React Fiber Summary:**
- Fiber is React’s reconciliation engine, supporting incremental rendering.
- Splits rendering into chunks, spreading work across frames.
- Improves responsiveness by allowing high-priority updates to interrupt lower-priority ones.

**Concurrency in React:**
- Enables features like Suspense and concurrent rendering.
- Allows React to prepare multiple UI versions simultaneously.

**Best Practices:**
- Use stable, unique keys for list items.
- Prefer pull-based scheduling for smoother UX.
- Optimize components to avoid unnecessary re-renders.

**Further Reading:**
- Official React docs on [Reconciliation](https://react.dev/learn/reconciliation).

---

### Basic Example of a Custom Hook

```js
function useHello() {
  return [];
}
```

---

In React, use the `Link` component instead of the `<a>` tag to avoid full page reloads. `NavLink` provides additional features for navigation. While `<a>` uses `href`, React’s `Link` uses the `to` prop (e.g., `to="/"`).